{"ast":null,"code":"import _classCallCheck from \"C:/Users/Usuario/Documents/GitHub/Facultad/Investigacion Operativa/max-flux/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Usuario/Documents/GitHub/Facultad/Investigacion Operativa/max-flux/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport ForceGraph from 'force-graph';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\n\nfunction ImplementationComponent_p_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.error);\n  }\n}\n\nfunction ImplementationComponent_div_31_th_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var i_r6 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i_r6, \" \");\n  }\n}\n\nfunction ImplementationComponent_div_31_tr_8_td_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r14 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"td\")(1, \"input\", 24);\n    i0.ɵɵlistener(\"keypress\", function ImplementationComponent_div_31_tr_8_td_3_Template_input_keypress_1_listener($event) {\n      var restoredCtx = i0.ɵɵrestoreView(_r14);\n      var j_r11 = restoredCtx.index;\n      var i_r8 = i0.ɵɵnextContext().index;\n      var ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.changeValue($event.key, i_r8, j_r11));\n    });\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction ImplementationComponent_div_31_tr_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"th\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, ImplementationComponent_div_31_tr_8_td_3_Template, 2, 0, \"td\", 23);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var node_r7 = ctx.$implicit;\n    var i_r8 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i_r8);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", node_r7);\n  }\n}\n\nfunction ImplementationComponent_div_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21)(1, \"p\", 9);\n    i0.ɵɵtext(2, \"Introducir los valores correspondientes a los flujos entre nodos:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"table\", 22)(4, \"tr\")(5, \"th\");\n    i0.ɵɵtext(6, \"Or./Ds.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, ImplementationComponent_div_31_th_7_Template, 2, 1, \"th\", 23);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, ImplementationComponent_div_31_tr_8_Template, 4, 2, \"tr\", 23);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.nodes);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.nodes);\n  }\n}\n\nfunction ImplementationComponent_div_32_div_3_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    var pf_r20 = ctx.$implicit;\n    var i_r21 = ctx.index;\n    var ctx_r17 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"K obtenida en la iteracion \", i_r21 + 1, \": \", pf_r20, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"Camino recorrido en la iteracion \", i_r21 + 1, \": \", ctx_r17.all_parents[i_r21], \" \");\n  }\n}\n\nfunction ImplementationComponent_div_32_div_3_th_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var i_r23 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i_r23, \" \");\n  }\n}\n\nfunction ImplementationComponent_div_32_div_3_tr_11_td_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var j_r27 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", j_r27, \" \");\n  }\n}\n\nfunction ImplementationComponent_div_32_div_3_tr_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"th\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, ImplementationComponent_div_32_div_3_tr_11_td_3_Template, 2, 1, \"td\", 23);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var i_r24 = ctx.$implicit;\n    var x_r25 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(x_r25);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i_r24);\n  }\n}\n\nfunction ImplementationComponent_div_32_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\", 9);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, ImplementationComponent_div_32_div_3_div_3_Template, 5, 4, \"div\", 23);\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵtext(5, \"Red residual final:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"table\", 27)(7, \"tr\")(8, \"th\");\n    i0.ɵɵtext(9, \"Or./Ds.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(10, ImplementationComponent_div_32_div_3_th_10_Template, 2, 1, \"th\", 23);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(11, ImplementationComponent_div_32_div_3_tr_11_Template, 4, 2, \"tr\", 23);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    var ctx_r15 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Flujo M\\xE1ximo obtenido: \", ctx_r15.flujoMax, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r15.path_flows);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r15.rGraph);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r15.rGraph);\n  }\n}\n\nfunction ImplementationComponent_div_32_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"div\", 28);\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ImplementationComponent_div_32_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r30 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 16)(1, \"button\", 25);\n    i0.ɵɵlistener(\"click\", function ImplementationComponent_div_32_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r30);\n      var ctx_r29 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r29.apply());\n    });\n    i0.ɵɵtext(2, \"Obtener Flujo M\\xE1ximo\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, ImplementationComponent_div_32_div_3_Template, 12, 4, \"div\", 26);\n    i0.ɵɵelementStart(4, \"div\", 16)(5, \"button\", 25);\n    i0.ɵɵlistener(\"click\", function ImplementationComponent_div_32_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r30);\n      var ctx_r31 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r31.seeGraph());\n    });\n    i0.ɵɵtext(6, \"Ver garfico\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(7, ImplementationComponent_div_32_div_7_Template, 2, 0, \"div\", 26);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.flujoMax);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.nodesGraph.length > 0);\n  }\n}\n\n;\n;\n;\nexport var ImplementationComponent = /*#__PURE__*/(function () {\n  var ImplementationComponent = /*#__PURE__*/function () {\n    function ImplementationComponent() {\n      _classCallCheck(this, ImplementationComponent);\n\n      this.error = null;\n      this.nodes = new Array();\n      this.nodesData = new Array();\n      this.all_parents = new Array();\n      this.path_flows = new Array();\n      this.rGraph = new Array();\n      this.nodesGraph = new Array();\n      this.links = new Array();\n    }\n\n    _createClass(ImplementationComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {}\n    }, {\n      key: \"validateInput\",\n      value: function validateInput() {\n        if (this.nodesQty < 2 || this.nodesQty > 10) {\n          this.error = \"La cantidad de nodos \" + this.nodesQty + \" no es permitida\";\n          return;\n        }\n\n        if (this.start > this.end || this.start < 0) {\n          this.error = \"El nodo inicial tiene que ser mayor que cero y menor que el nodo final.\";\n          return;\n        }\n\n        this.error = null;\n\n        if (this.nodes.length > 0) {\n          this.nodes = [];\n        }\n\n        for (var i = 0; i < this.nodesQty; i++) {\n          var node = {\n            id: String(i),\n            name: String(i),\n            val: 1,\n            label: String(i)\n          };\n          this.nodesGraph.push(node);\n        }\n\n        console.log(this.nodesGraph);\n\n        for (var _i = 0; _i <= this.nodesQty - 1; _i++) {\n          var row = new Array();\n\n          for (var j = 0; j <= this.nodesQty - 1; j++) {\n            row.push(0);\n          }\n\n          this.nodes.push(row);\n        }\n\n        this.nodesData = JSON.parse(JSON.stringify(this.nodes));\n      }\n    }, {\n      key: \"changeValue\",\n      value: function changeValue(newValue, i, j) {\n        this.nodesData[i][j] = Number(newValue);\n      }\n    }, {\n      key: \"seeGraph\",\n      value: function seeGraph() {\n        var _this = this;\n\n        var graph = document.getElementById(\"graph\");\n        var myGraph = ForceGraph();\n        var dataGraph = {\n          links: [],\n          nodes: []\n        }; // Fill nodes\n\n        this.nodesGraph.forEach(function (node) {\n          dataGraph.nodes.push(node);\n        }); // Fill links\n\n        this.rGraph.forEach(function (nodes, i) {\n          nodes.forEach(function (node, j) {\n            if (node !== 0) {\n              var link = {\n                source: String(i),\n                target: String(j)\n              };\n\n              _this.links.push(link);\n            }\n          });\n        });\n        this.links.forEach(function (link) {\n          dataGraph.links.push(link);\n        });\n        myGraph(graph).graphData(dataGraph).width(350).height(350).linkLabel(function (link) {\n          return link.source.id.toString() + ' -- ' + link.target.id.toString();\n        });\n      }\n    }, {\n      key: \"apply\",\n      value: function apply() {\n        // Javascript program for implementation of Ford\n        // Fulkerson algorithm\n        // Number of vertices in graph\n        var V = this.nodesQty; // Returns true if there is a path from source\n        // 's' to sink 't' in residual graph. Also\n        // fills parent[] to store the path\n\n        function bfs(rGraph, s, t, parent) {\n          // Create a visited array and mark all\n          // vertices as not visited\n          var visited = new Array(V);\n\n          for (var i = 0; i < V; ++i) {\n            visited[i] = false;\n          } // Create a queue, enqueue source vertex\n          // and mark source vertex as visited\n\n\n          var queue = [];\n          queue.push(s);\n          visited[s] = true;\n          parent[s] = -1; // Standard BFS Loop\n\n          while (queue.length != 0) {\n            var u = queue.shift();\n\n            for (var v = 0; v < V; v++) {\n              if (visited[v] == false && rGraph[u][v] > 0) {\n                // If we find a connection to the sink\n                // node, then there is no point in BFS\n                // anymore We just have to set its parent\n                // and can return true\n                if (v == t) {\n                  parent[v] = u;\n                  return true;\n                }\n\n                queue.push(v);\n                parent[v] = u;\n                visited[v] = true;\n              }\n            }\n          } // We didn't reach sink in BFS starting\n          // from source, so return false\n\n\n          return false;\n        } // Returns tne maximum flow from s to t in\n        // the given graph\n\n\n        function fordFulkerson(graph, s, t) {\n          var u, v; // Create a residual graph and fill the\n          // residual graph with given capacities\n          // in the original graph as residual\n          // capacities in residual graph\n          // Residual graph where rGraph[i][j]\n          // indicates residual capacity of edge\n          // from i to j (if there is an edge.\n          // If rGraph[i][j] is 0, then there is\n          // not)\n\n          var rGraph = new Array(V);\n\n          for (u = 0; u < V; u++) {\n            rGraph[u] = new Array(V);\n\n            for (v = 0; v < V; v++) {\n              rGraph[u][v] = graph[u][v];\n            }\n          } // This array is filled by BFS and to store path\n\n\n          var parent = new Array(V); // To store paths along the iterations\n\n          var all_parents = new Array(); // There is no flow initially\n\n          var max_flow = 0; // To store flow quantities in each iteration \n\n          var path_flows = new Array(); // Augment the flow while tere\n          // is path from source to sink\n\n          while (bfs(rGraph, s, t, parent)) {\n            // Store path in array\n            all_parents.push(parent); // Find minimum residual capacity of the edhes\n            // along the path filled by BFS. Or we can say\n            // find the maximum flow through the path found.\n\n            var path_flow = Number.MAX_VALUE;\n\n            for (v = t; v != s; v = parent[v]) {\n              u = parent[v];\n              path_flow = Math.min(path_flow, rGraph[u][v]);\n            } // Update residual capacities of the edges and\n            // reverse edges along the path\n\n\n            for (v = t; v != s; v = parent[v]) {\n              u = parent[v];\n              rGraph[u][v] -= path_flow;\n              rGraph[v][u] += path_flow;\n            } // Store path flow in array\n\n\n            path_flows.push(path_flow); // Add path flow to overall flow\n\n            max_flow += path_flow;\n          }\n\n          console.log('Sumatoria: ', path_flows);\n          console.log('Residual: ', rGraph); // Return the overall flow\n\n          return {\n            max_flow: max_flow,\n            path_flows: path_flows,\n            all_parents: all_parents,\n            rGraph: rGraph\n          };\n        }\n\n        var result = fordFulkerson(this.nodesData, this.start, this.end);\n        this.flujoMax = result.max_flow;\n        this.all_parents = result.all_parents;\n        this.path_flows = result.path_flows;\n        console.log(result.rGraph);\n        this.rGraph = result.rGraph;\n      }\n    }]);\n\n    return ImplementationComponent;\n  }();\n\n  ImplementationComponent.ɵfac = function ImplementationComponent_Factory(t) {\n    return new (t || ImplementationComponent)();\n  };\n\n  ImplementationComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ImplementationComponent,\n    selectors: [[\"app-implementation\"]],\n    decls: 33,\n    vars: 6,\n    consts: [[\"lang\", \"en\"], [\"charset\", \"UTF-8\"], [\"http-equiv\", \"X-UA-Compatible\", \"content\", \"IE=edge\"], [\"name\", \"viewport\", \"content\", \"width=device-width, initial-scale=1.0\"], [\"href\", \"https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css\", \"rel\", \"stylesheet\", \"integrity\", \"sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor\", \"crossorigin\", \"anonymous\"], [1, \"mt-5\", 2, \"margin-left\", \"auto\", \"margin-right\", \"auto\", \"width\", \"35%\"], [1, \"card\", 2, \"width\", \"100%\"], [1, \"card-body\"], [1, \"card-title\", 2, \"text-align\", \"center\"], [1, \"mt-2\"], [\"for\", \"nodesQty\", 1, \"form-label\"], [\"id\", \"nodesQty\", \"type\", \"number\", \"placeholder\", \"Cantidad de nodos de la red\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"start\", 1, \"form-label\"], [\"id\", \"start\", \"type\", \"number\", \"placeholder\", \"Se comienza por el nodo '0' (cero)\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"end\", 1, \"form-label\"], [\"id\", \"end\", \"type\", \"number\", \"placeholder\", \"Ultimo nodo igual a la cant. menos uno\", \"data-toggle\", \"tooltip\", \"data-placement\", \"top\", \"title\", \"Tooltip on top\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"d-grid\", \"gap-2\", \"mt-2\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [\"class\", \"mt-2\", 4, \"ngIf\"], [\"class\", \"table-responsive\", 4, \"ngIf\"], [\"class\", \"d-grid gap-2 mt-2\", 4, \"ngIf\"], [1, \"table-responsive\"], [1, \"table\", 2, \"text-align\", \"center\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"number\", 1, \"form-control\", \"form-control-sm\", 3, \"keypress\"], [1, \"btn\", \"btn-primary\", \"mt-2\", 3, \"click\"], [4, \"ngIf\"], [1, \"table\"], [\"id\", \"graph\"]],\n    template: function ImplementationComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"html\", 0)(1, \"head\");\n        i0.ɵɵelement(2, \"meta\", 1)(3, \"meta\", 2)(4, \"meta\", 3);\n        i0.ɵɵelementStart(5, \"title\");\n        i0.ɵɵtext(6, \"Flujo Maximo\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"link\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"body\")(9, \"div\", 5)(10, \"div\", 6)(11, \"div\", 7)(12, \"h5\", 8);\n        i0.ɵɵtext(13, \"Algoritmo de Flujo M\\xE1ximo - Ford Fulkerson\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 9)(15, \"div\", 9)(16, \"label\", 10);\n        i0.ɵɵtext(17, \"Cantidad de nodos: \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"input\", 11);\n        i0.ɵɵlistener(\"ngModelChange\", function ImplementationComponent_Template_input_ngModelChange_18_listener($event) {\n          return ctx.nodesQty = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(19, \"div\", 9)(20, \"label\", 12);\n        i0.ɵɵtext(21, \"Nodo inicial: \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"input\", 13);\n        i0.ɵɵlistener(\"ngModelChange\", function ImplementationComponent_Template_input_ngModelChange_22_listener($event) {\n          return ctx.start = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(23, \"div\", 9)(24, \"label\", 14);\n        i0.ɵɵtext(25, \"Nodo final: \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"input\", 15);\n        i0.ɵɵlistener(\"ngModelChange\", function ImplementationComponent_Template_input_ngModelChange_26_listener($event) {\n          return ctx.end = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(27, \"div\", 16)(28, \"button\", 17);\n        i0.ɵɵlistener(\"click\", function ImplementationComponent_Template_button_click_28_listener() {\n          return ctx.validateInput();\n        });\n        i0.ɵɵtext(29, \"Validar nodos\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(30, ImplementationComponent_p_30_Template, 2, 1, \"p\", 18);\n        i0.ɵɵtemplate(31, ImplementationComponent_div_31_Template, 9, 2, \"div\", 19);\n        i0.ɵɵtemplate(32, ImplementationComponent_div_32_Template, 8, 2, \"div\", 20);\n        i0.ɵɵelementEnd()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(18);\n        i0.ɵɵproperty(\"ngModel\", ctx.nodesQty);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.start);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.end);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.error);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.nodesData.length > 0 && !ctx.error);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.nodesData.length > 0);\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgIf, i2.DefaultValueAccessor, i2.NumberValueAccessor, i2.NgControlStatus, i2.NgModel]\n  });\n  return ImplementationComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}